#!/usr/bin/env python3

"""
Behavior:
    A qutebrowser userscript that import bookmarks in Nextcloud's Bookmarks app.

Requirements:
    requests

userscript setup:
    Optionally create ~/.config/qutebrowser/nextcloud.ini like:

[nextcloud]
HOST=https://nextcloud.example.com
USER=username
;PASSWORD=lamepassword


    If settings aren't in the configuration file, the user will be prompted during
    bookmark creation.  If DESCRIPTION and TAGS are set to None, they will be left
    blank. If the user does not want to be prompted for a password, it is recommended
    to set up an 'app password'.  See the following for instructions:
    https://docs.nextcloud.com/server/latest/user_manual/en/session_management.html#managing-devices  # noqa: E501

qutebrowser setup:
    c.aliases['nextcloud-bookmarks-import'] = 'spawn --userscript import-nextcloud-bookmarks'


troubleshooting:
    Errors detected within this userscript will have an exit of 231.  All other
    exit codes will come from requests.
"""

import configparser
import os

from json import dumps
from os import environ, path, waitid_result
from sys import argv, exit

from PyQt5.QtWidgets import QApplication, QInputDialog, QLineEdit
from requests import get, post
from requests.auth import HTTPBasicAuth


TMP_BOOKMARKS_PATH = '/tmp/nextcloud-bookmarks.html'


def get_text(name, info):
    """Get input from the user."""
    _app = QApplication(argv)  # noqa: F841
    if name == "password":
        text, ok = QInputDialog.getText(
            None,
            "sync-nextcloud-bookmarks userscript",
            "Please enter {}".format(info),
            QLineEdit.Password,
        )
    else:
        text, ok = QInputDialog.getText(
            None, "sync-nextcloud-bookmarks userscript", "Please enter {}".format(
                info)
        )
    if not ok:
        message("info", "Dialog box canceled.")
        exit(0)
    return text


def message(level, text):
    """display message"""
    with open(environ["QUTE_FIFO"], "w") as fifo:
        fifo.write(
            'message-{} "sync-nextcloud-bookmarks userscript: {}"\n'.format(
                level, text)
        )
        fifo.flush()

if "QUTE_FIFO" not in environ:
    print(
        "This script is designed to run as a qutebrowser userscript, "
        "not as a standalone script."
    )
    exit(231)

if "QUTE_CONFIG_DIR" not in environ:
    if "XDG_CONFIG_HOME" in environ:
        QUTE_CONFIG_DIR = environ["XDG_CONFIG_HOME"] + "/qutebrowser"
    else:
        QUTE_CONFIG_DIR = environ["HOME"] + "/.config/qutebrowser"
else:
    QUTE_CONFIG_DIR = environ["QUTE_CONFIG_DIR"]

config_file = QUTE_CONFIG_DIR + "/nextcloud.ini"
if path.isfile(config_file):
    config = configparser.ConfigParser()
    config.read(config_file)
    settings = dict(config.items("nextcloud"))
else:
    settings = {}

settings_info = [
    ("host", "host information.", "required"),
    ("user", "username.", "required"),
    ("password", "password.", "required"),
]

# check for settings that need user interaction and clear optional setting if need be
for setting in settings_info:
    if setting[0] not in settings:
        userInput = get_text(setting[0], setting[1])
        settings[setting[0]] = userInput
    if setting[2] == "optional":
        if settings[setting[0]] == "None":
            settings[setting[0]] = ""


api_url = settings["host"] + \
    "/index.php/apps/bookmarks/public/rest/v2/bookmark/export"

auth = HTTPBasicAuth(settings["user"], settings["password"])
headers = {"Content-Type": "application/json"}
# params = {"url": QUTE_URL}

# check if there is already a bookmark for the URL
r = get(
    api_url,
    auth=auth,
    headers=headers,
    timeout=(3.05, 27),
)
if r.status_code != 200:
    message(
        "error",
        "Could not connect to {} with status code {}".format(
            settings["host"], r.status_code
        ),
    )

    # exit(r.status_code)

try:

    with open(TMP_BOOKMARKS_PATH, "w") as f:
        f.write(r.text)
        os.system("/usr/share/qutebrowser/scripts/importer.py " +
                  TMP_BOOKMARKS_PATH + ' > ' + QUTE_CONFIG_DIR + "/quickmarks")
        message("info", "bookmark import success")

    # print(r.content)
    # print(len(bookmarks))
except:
    message("error", "Error importing bookmarks")
    pass
